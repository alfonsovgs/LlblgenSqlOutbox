//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using NsbSamplesSqlOutbox.EntityClasses;
using NsbSamplesSqlOutbox.HelperClasses;
using NsbSamplesSqlOutbox.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace NsbSamplesSqlOutbox.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly NsbSamplesSqlOutbox.EntityType _typeOfEntity;
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, NsbSamplesSqlOutbox.EntityType typeOfEntity, bool isInHierarchy) : base(entityName)
		{
			_typeOfEntity = typeOfEntity;
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((NsbSamplesSqlOutbox.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty ErrorEntity objects.</summary>
	[Serializable]
	public partial class ErrorEntityFactory : EntityFactoryBase2<ErrorEntity> 
	{
		/// <summary>CTor</summary>
		public ErrorEntityFactory() : base("ErrorEntity", NsbSamplesSqlOutbox.EntityType.ErrorEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ErrorEntity(fields); }
	}

	/// <summary>Factory to create new, empty OutboxDataEntity objects.</summary>
	[Serializable]
	public partial class OutboxDataEntityFactory : EntityFactoryBase2<OutboxDataEntity> 
	{
		/// <summary>CTor</summary>
		public OutboxDataEntityFactory() : base("OutboxDataEntity", NsbSamplesSqlOutbox.EntityType.OutboxDataEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new OutboxDataEntity(fields); }
	}

	/// <summary>Factory to create new, empty SamplesSqlOutboxReceiverEntity objects.</summary>
	[Serializable]
	public partial class SamplesSqlOutboxReceiverEntityFactory : EntityFactoryBase2<SamplesSqlOutboxReceiverEntity> 
	{
		/// <summary>CTor</summary>
		public SamplesSqlOutboxReceiverEntityFactory() : base("SamplesSqlOutboxReceiverEntity", NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SamplesSqlOutboxReceiverEntity(fields); }
	}

	/// <summary>Factory to create new, empty SamplesSqlOutboxReceiverDelayedEntity objects.</summary>
	[Serializable]
	public partial class SamplesSqlOutboxReceiverDelayedEntityFactory : EntityFactoryBase2<SamplesSqlOutboxReceiverDelayedEntity> 
	{
		/// <summary>CTor</summary>
		public SamplesSqlOutboxReceiverDelayedEntityFactory() : base("SamplesSqlOutboxReceiverDelayedEntity", NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverDelayedEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SamplesSqlOutboxReceiverDelayedEntity(fields); }
	}

	/// <summary>Factory to create new, empty SubmittedOrderEntity objects.</summary>
	[Serializable]
	public partial class SubmittedOrderEntityFactory : EntityFactoryBase2<SubmittedOrderEntity> 
	{
		/// <summary>CTor</summary>
		public SubmittedOrderEntityFactory() : base("SubmittedOrderEntity", NsbSamplesSqlOutbox.EntityType.SubmittedOrderEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SubmittedOrderEntity(fields); }
	}

	/// <summary>Factory to create new, empty SubscriptionDataEntity objects.</summary>
	[Serializable]
	public partial class SubscriptionDataEntityFactory : EntityFactoryBase2<SubscriptionDataEntity> 
	{
		/// <summary>CTor</summary>
		public SubscriptionDataEntityFactory() : base("SubscriptionDataEntity", NsbSamplesSqlOutbox.EntityType.SubscriptionDataEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SubscriptionDataEntity(fields); }
	}

	/// <summary>Factory to create new, empty OutboxData1Entity objects.</summary>
	[Serializable]
	public partial class OutboxData1EntityFactory : EntityFactoryBase2<OutboxData1Entity> 
	{
		/// <summary>CTor</summary>
		public OutboxData1EntityFactory() : base("OutboxData1Entity", NsbSamplesSqlOutbox.EntityType.OutboxData1Entity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new OutboxData1Entity(fields); }
	}

	/// <summary>Factory to create new, empty SamplesSqlOutboxSenderEntity objects.</summary>
	[Serializable]
	public partial class SamplesSqlOutboxSenderEntityFactory : EntityFactoryBase2<SamplesSqlOutboxSenderEntity> 
	{
		/// <summary>CTor</summary>
		public SamplesSqlOutboxSenderEntityFactory() : base("SamplesSqlOutboxSenderEntity", NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SamplesSqlOutboxSenderEntity(fields); }
	}

	/// <summary>Factory to create new, empty SamplesSqlOutboxSenderDelayedEntity objects.</summary>
	[Serializable]
	public partial class SamplesSqlOutboxSenderDelayedEntityFactory : EntityFactoryBase2<SamplesSqlOutboxSenderDelayedEntity> 
	{
		/// <summary>CTor</summary>
		public SamplesSqlOutboxSenderDelayedEntityFactory() : base("SamplesSqlOutboxSenderDelayedEntity", NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderDelayedEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SamplesSqlOutboxSenderDelayedEntity(fields); }
	}

	/// <summary>Factory to create new, empty SubscriptionData1Entity objects.</summary>
	[Serializable]
	public partial class SubscriptionData1EntityFactory : EntityFactoryBase2<SubscriptionData1Entity> 
	{
		/// <summary>CTor</summary>
		public SubscriptionData1EntityFactory() : base("SubscriptionData1Entity", NsbSamplesSqlOutbox.EntityType.SubscriptionData1Entity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SubscriptionData1Entity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(NsbSamplesSqlOutbox.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(NsbSamplesSqlOutbox.EntityType)))
			{
				var factory = GetFactory((NsbSamplesSqlOutbox.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the NsbSamplesSqlOutbox.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(NsbSamplesSqlOutbox.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case NsbSamplesSqlOutbox.EntityType.ErrorEntity:
					return new ErrorEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.OutboxDataEntity:
					return new OutboxDataEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverEntity:
					return new SamplesSqlOutboxReceiverEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverDelayedEntity:
					return new SamplesSqlOutboxReceiverDelayedEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SubmittedOrderEntity:
					return new SubmittedOrderEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SubscriptionDataEntity:
					return new SubscriptionDataEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.OutboxData1Entity:
					return new OutboxData1EntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderEntity:
					return new SamplesSqlOutboxSenderEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderDelayedEntity:
					return new SamplesSqlOutboxSenderDelayedEntityFactory();
				case NsbSamplesSqlOutbox.EntityType.SubscriptionData1Entity:
					return new SubscriptionData1EntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the NsbSamplesSqlOutbox.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (NsbSamplesSqlOutbox.EntityType)Enum.Parse(typeof(NsbSamplesSqlOutbox.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((NsbSamplesSqlOutbox.EntityType)Enum.Parse(typeof(NsbSamplesSqlOutbox.EntityType), leftOperandEntityName, false), joinType, (NsbSamplesSqlOutbox.EntityType)Enum.Parse(typeof(NsbSamplesSqlOutbox.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (NsbSamplesSqlOutbox.EntityType)Enum.Parse(typeof(NsbSamplesSqlOutbox.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((NsbSamplesSqlOutbox.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}
