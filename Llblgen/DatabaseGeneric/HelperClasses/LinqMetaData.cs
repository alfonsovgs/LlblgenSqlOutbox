//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Linq;
using System.Collections.Generic;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using NsbSamplesSqlOutbox.EntityClasses;
using NsbSamplesSqlOutbox.FactoryClasses;

namespace NsbSamplesSqlOutbox.Linq
{
	/// <summary>Meta-data class for the construction of Linq queries which are to be executed using LLBLGen Pro code.</summary>
	public partial class LinqMetaData: ILinqMetaData
	{
		/// <summary>CTor. Using this ctor will leave the IDataAccessAdapter object to use empty. To be able to execute the query, an IDataAccessAdapter instance
		/// is required, and has to be set on the LLBLGenProProvider2 object in the query to execute. </summary>
		public LinqMetaData() : this(null, null) { }
		
		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse) : this (adapterToUse, null) { }

		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <param name="customFunctionMappings">The custom function mappings to use. These take higher precedence than the ones in the DQE to use.</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse, FunctionMappingStore customFunctionMappings)
		{
			this.AdapterToUse = adapterToUse;
			this.CustomFunctionMappings = customFunctionMappings;
		}
	
		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <param name="typeOfEntity">the type of the entity to get the datasource for</param>
		/// <returns>the requested datasource</returns>
		public IDataSource GetQueryableForEntity(int typeOfEntity)
		{
			switch((NsbSamplesSqlOutbox.EntityType)typeOfEntity)
			{
				case NsbSamplesSqlOutbox.EntityType.ErrorEntity:
					return this.Error;
				case NsbSamplesSqlOutbox.EntityType.OutboxDataEntity:
					return this.OutboxData;
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverEntity:
					return this.SamplesSqlOutboxReceiver;
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxReceiverDelayedEntity:
					return this.SamplesSqlOutboxReceiverDelayed;
				case NsbSamplesSqlOutbox.EntityType.SubmittedOrderEntity:
					return this.SubmittedOrder;
				case NsbSamplesSqlOutbox.EntityType.SubscriptionDataEntity:
					return this.SubscriptionData;
				case NsbSamplesSqlOutbox.EntityType.OutboxData1Entity:
					return this.OutboxData1;
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderEntity:
					return this.SamplesSqlOutboxSender;
				case NsbSamplesSqlOutbox.EntityType.SamplesSqlOutboxSenderDelayedEntity:
					return this.SamplesSqlOutboxSenderDelayed;
				case NsbSamplesSqlOutbox.EntityType.SubscriptionData1Entity:
					return this.SubscriptionData1;
				default:
					return null;
			}
		}

		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <typeparam name="TEntity">the type of the entity to get the datasource for</typeparam>
		/// <returns>the requested datasource</returns>
		public DataSource2<TEntity> GetQueryableForEntity<TEntity>()
				where TEntity : class
		{
			return new DataSource2<TEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse);
		}

		/// <summary>returns the datasource to use in a Linq query when targeting ErrorEntity instances in the database.</summary>
		public DataSource2<ErrorEntity> Error {	get { return new DataSource2<ErrorEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting OutboxDataEntity instances in the database.</summary>
		public DataSource2<OutboxDataEntity> OutboxData {	get { return new DataSource2<OutboxDataEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SamplesSqlOutboxReceiverEntity instances in the database.</summary>
		public DataSource2<SamplesSqlOutboxReceiverEntity> SamplesSqlOutboxReceiver {	get { return new DataSource2<SamplesSqlOutboxReceiverEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SamplesSqlOutboxReceiverDelayedEntity instances in the database.</summary>
		public DataSource2<SamplesSqlOutboxReceiverDelayedEntity> SamplesSqlOutboxReceiverDelayed {	get { return new DataSource2<SamplesSqlOutboxReceiverDelayedEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SubmittedOrderEntity instances in the database.</summary>
		public DataSource2<SubmittedOrderEntity> SubmittedOrder {	get { return new DataSource2<SubmittedOrderEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SubscriptionDataEntity instances in the database.</summary>
		public DataSource2<SubscriptionDataEntity> SubscriptionData {	get { return new DataSource2<SubscriptionDataEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting OutboxData1Entity instances in the database.</summary>
		public DataSource2<OutboxData1Entity> OutboxData1 {	get { return new DataSource2<OutboxData1Entity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SamplesSqlOutboxSenderEntity instances in the database.</summary>
		public DataSource2<SamplesSqlOutboxSenderEntity> SamplesSqlOutboxSender {	get { return new DataSource2<SamplesSqlOutboxSenderEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SamplesSqlOutboxSenderDelayedEntity instances in the database.</summary>
		public DataSource2<SamplesSqlOutboxSenderDelayedEntity> SamplesSqlOutboxSenderDelayed {	get { return new DataSource2<SamplesSqlOutboxSenderDelayedEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SubscriptionData1Entity instances in the database.</summary>
		public DataSource2<SubscriptionData1Entity> SubscriptionData1 {	get { return new DataSource2<SubscriptionData1Entity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		


		/// <summary> Gets / sets the IDataAccessAdapter to use for the queries created with this meta data object.</summary>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data
		/// till they go out of scope.</remarks>
		public IDataAccessAdapter AdapterToUse { get; set; }
		
		/// <summary>Gets or sets the custom function mappings to use. These take higher precedence than the ones in the DQE to use</summary>
		public FunctionMappingStore CustomFunctionMappings { get; set; }
		
		/// <summary>Gets or sets the Context instance to use for entity fetches.</summary>
		public Context ContextToUse { get; set; }
	}
}